<?php 
/* Cachekey: cache/stash_default/documentation\api\php\cabc5a20cb41ffd74652896b0adf029c/ */
/* Type: array */
/* Expiration: 2018-02-15T08:31:55+00:00 */



$loaded = true;
$expiration = 1518683515;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1518258375;
